// function LinkedList() {
//   this.head = null;
//   this.tail = null;
// }

// function Node(value,next,prev) {
//   this.value = value;
//   this.next = next;
//   this.prev = prev;
// }

// LinkedList.prototype.addToHead = function (value) {
//   var newNode = new Node(value,this.head,null);
//   if(this.head) this.head.prev = newNode;
//   else this.tail = newNode;
//   this.head = newNode;
// };

// LinkedList.prototype.addToTail = function (value) {
//   var newNode = new Node(value,null, this.tail);
//   if (this.tail) this.tail.prev = newNode;
//   else this.head = newNode;
//   this.tail = newNode;
// }

// LinkedList.prototype.removeHead = function () {
//   if (!this.head) return null;
//   var value = this.head.value;
//   this.head = this.head.next;
//   if (this.head) this.head.prev = null;
//   else this.tail = null;
// }

// LinkedList.prototype.removeTail = function () {
//   if (!this.tail) return null;
//   var value = this.tail.value;
//   this.tail = this.tail.prev;
//   if (this.tail) this.tail.next = null;
//   else this.head = null;
//   return val;
// }

// LinkedList.prototype.search = function (searchValue) {
//   var currentNode = this.head;
//   while(currentNode) {
//     if (currentNode.value === searchValue) return currentNode;
//     currentNode = currentNode.next;
//   }
//   return null;
// }

// LinkedList.prototype.indexOf = function (value) {
//   var currentNode = this.head;
//   var indexes = [];
//   var counter = 0;
//   while(currentNode) {
//     if (currentNode.value === value) indexes.push(counter);
//     counter++;
//     currentNode = currentNode.next;
//   }
//   return indexes;
// }

// var ll = new LinkedList();
// ll.addToHead(3);
// ll.addToHead(5);
// ll.addToHead(3);
// ll.addToTail(8);

// ll.indexOf(5);

// var fact = 1;
// function factorial(num) {
//   fact *= num;
//   num--;
//   if (num<=0) {
//   return;
//   } else {
//     factorial(num);
//   }
//   return fact;
// }
// factorial(4);


// function BST(value) {
//   this.value = value;
//   this.left = null;
//   this.right = null;
// }

// BST.prototype.insert = function (value) {
//   if (value <= this.value) {
//     if (!this.left) this.left = new BST(value);
//     else this.left.insert(value);
//   } else if (value > this.value) {
//     if (!this.right) this.right = new BST(value);
//     else this.right.insert(value);
//   }
// }

// var bst = new BST(50);
// bst.insert(30);
// bst.insert(70);
// bst.insert(100);
// bst.insert(60);
// bst.insert(59);
// bst.insert(20);
// bst.insert(45);
// bst.insert(35);
// bst.insert(85);
// bst.insert(105);
// bst.insert(10);

// BST.prototype.contains = function (value) {
//   if (value === this.value) return true;
//   if (value < this.value) {
//     if (!this.left) return false;
//     else return this.left.contains(value);
//   } else {
//     if (value > this.value) {
//       if (!this.right) return false;
//       else return this.right.contains(value);
//     }
//   }
// }
// var n = 0;
// BST.prototype.depthFirstTraversal = function (itrFunc) {
//   if (this.left) this.left.depthFirstTraversal(itrFunc);
//   itrFunc(this.value);
//   if (this.right) this.right.depthFirstTraversal(itrFunc);
// }

// BST.prototype.breathFirstTraversal = function (itrFunc) {
//   var queue = [this];
//   while (queue.length) {
//     var treeNode = queue.shift();
//     itrFunc(treeNode);
//     if (treeNode.left) queue.push(treeNode.left);
//     if (treeNode.right) queue.push(treeNode.right);
//   }
// }



// function log(value) {
// console.log(value.value);  
// }

// bst.breathFirstTraversal(log);


function HashTable (size) {
  this.bucket = Array(size);
  this.numBuckets = this.bucket.length;
}

function HashNode (key,value,next) {
  this.key = key;
  this.value = value;
  this.next = next || null;
}

HashTable.prototype.hash = function (key) {
  var total = 123321;
  return total % this.numBuckets;
}

var ht = new HashTable(30);
 console.log(ht);

HashTable.prototype.insert = function (value) {
  
}
